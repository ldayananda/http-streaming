@startuml

header PlaylistLoader sequences
title PlaylistLoader sequences: Master Manifest and Video-Only

Participant "MasterPlaylistController" as MPC #green
Participant "PlaylistLoader: constructor" as PLc
Participant "PL: load()" as load
Participant "PL: start()" as start
Participant "MasterPlaylistLoader\nloadedplaylist handler" as lpH
Participant "MasterPlaylistLoader\nloadedmetadata handler" as lmH
  note over lmH, lpH #white: This is located in the MasterPlaylistController
Participant "media()" as media
Participant "external server" as ext #red
Participant "m3u8Parser" as parser #orange
Participant "haveMetadata()" as haveMetadata
Participant "mainSegmentLoader" as SL #blue
Participant "mediaGroups" as mG #purple

== Initialization ==

MPC -> PLc : "setting up MasterPlaylistController"

PLc -> load : "state = 'HAVE_NOTHING'"
note left #lightyellow: sets up mediaupdatetimeout handler \nfor live playlist staleness

alt started
  load -> load
  note left
    If live playlist
      trigger 'mediaupdatetimeout' on master loader
    If vod
      trigger 'loadedplaylist' on master loader
  end note

else not started

	load -> start : "started = true"

end

== Requesting Master ==

start -> ext: "xhr request for master manifest"
ext -> start : "response with master manifest"
start -> parser: "parse master manifest"
parser -> start: "object representing manifest"
start -> start : "state = 'HAVE_MASTER'"
note left: trigger 'loadedplaylist' on master loader

== Requesting media ==

start -> lpH: handling loadedplaylist
lpH -> media : "select initial (video) playlist"

media -> media : "state = 'SWITCHING_MEDIA'"
media -> ext : request child manifest
ext -> media: child manifest returned

media -> haveMetadata: "state = 'HAVE_METADATA'"
haveMetadata -> parser: "parse manifest"
parser -> haveMetadata: "object representing the manifest"
haveMetadata -> haveMetadata: "update loader's master playlist"

alt live
  haveMetadata -> haveMetadata
  note left #lightyellow: setup mediaupdatetimeout

else vod
  haveMetadata -> haveMetadata
  note left
    trigger 'loadedplaylist' on
    master loader. This does not
    end up requesting segments
    at this point.
  end note

  haveMetadata -> lpH : "loadedplaylist handler"
  lpH -> lpH : "setup durationchange handler"
end

== Request media segments ===

haveMetadata -> media
  note left: trigger 'loadedmetadata' on master loader

media -> lmH  : "loadedmetadata handler"

alt live and preload != 'none'
  lmH -> SL: request media segments

else vod and live with preload = 'none'
  lmH -> mG: setupMediaGroups

end

@enduml
